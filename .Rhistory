FROM detail
WHERE detail.detail_name_rus='",detail,"';
")
detail_id_frame <- dbGetQuery(con, detail_select)
detail_id <- detail_id_frame$detail_id[1]
return(detail_id)
}else if(type == "drawing name"){
detail_select <- paste0("SELECT detail.detail_figure_id
FROM detail
WHERE detail.detail_name_rus='",detail,"';
")
detail_fig_id_frame <- dbGetQuery(con, detail_select)
detail_fig_id <- detail_fig_id_frame$detail_figure_id[1]
return(detail_fig_id)
}else {
return(NaN)
}
}
get_material_list <- function(con, detail, valve_name){
detail_list <- get_detial_list(con, valve_name)
detail_frame_index <- which(detail_list$detail_name_rus == detail, arr.ind = TRUE)
detail_id <- detail_list$detail_id[detail_frame_index]
selected_material <- paste0("SELECT material.material_id, material.material_name
FROM material INNER JOIN (detail INNER JOIN detail_material ON detail.detail_id = detail_material.detail_id) ON material.material_id = detail_material.material_id
WHERE (((detail.detail_id)=",detail_id,"))"
)
x <- dbGetQuery(con, selected_material)
# Encoding(x$material_name) <- "UTF-8"
return(x)
}
get_material_input_info <- function(con, material, type = NaN){
if(type == "id"){
material_select <- paste0("SELECT material.material_id
FROM material
WHERE (((material.material_name)='",material,"'));
")
material_id_frame <- dbGetQuery(con,material_select)
material_id <- material_id_frame$material_id[1]
return(material_id)
}else if(type == "body material type") {
bmt_select <- paste0("SELECT
meterial_type_general.material_type_4code
FROM
public.detail,
public.meterial_type_general,
public.detail_material,
public.material
WHERE
detail.detail_id = detail_material.detail_id AND
detail_material.material_id = material.material_id AND
material.material_type_general_id = meterial_type_general.material_type_general_id AND
detail.detail_id = 1 AND
material.material_name = '", material,"';
")
bmt_frame <- dbGetQuery(con, bmt_select)
body_material_type <- bmt_frame$material_type_4code[1]
return(body_material_type)
}else {
return(NaN)
}
}
get_distinct_names_of_qa_operations <- function(con){
x<- dbGetQuery(con, "SELECT DISTINCT operation_order , operation_name_particular FROM list_of_operations")
Encoding(x$operation_name_particular) <- "UTF-8"
x <- x[order(x$operation_order),]
x$join_key <- as.integer(seq(1, length(x$operation_name_particular), by = 1))
return(x)
}
get_qa_operations_for_detail <-function(con, valve_name, qa_type, tempr, tempr_oper, pressure, detail, material){
# get valve id
valve_id <- get_valve_input_info(con, valve_name, type = "id")
# get qa_type id
qa_type_id <- get_qa_input_info(con, qa_type, type = "id")
# get tempr_id
tempr_id <- get_tempr_input_info(con, tempr, type = "id")
# get tempr_oper_id
tempr_oper_id <- get_tempr_oper_input_info(con, tempr_oper, type = "id")
# get pressure_id
pressure_id <- get_pressure_input_info(con, pressure, type = "id")
# get detail id
detail_id <- get_detail_input_info(con, detail, type = "id")
# get material_id
material_id <- get_material_input_info(con, material, type = "id")
# шпильки
if(detail_id == 5 || detail_id == 31){
material_type_separete_id <- 6
select_operations <- paste0("SELECT  list_of_operations.operation_order, list_of_operations.operation_name_4table
FROM valve INNER JOIN ((valve_type INNER JOIN (valve_qa_type INNER JOIN (tempr INNER JOIN (tempr_operation INNER JOIN (pressure INNER JOIN (meterial_type_general INNER JOIN (material INNER JOIN ((material_type_separate INNER JOIN general_to_separate ON material_type_separate.material_type_separete_id = general_to_separate.material_type_separete_id) INNER JOIN (list_of_operations INNER JOIN (((detail INNER JOIN detail_material ON detail.detail_id = detail_material.detail_id) INNER JOIN ((detail_type INNER JOIN operations_qa_dependency ON detail_type.detail_type = operations_qa_dependency.detail_type) INNER JOIN detail_detail_type ON detail_type.detail_type = detail_detail_type.detail_type) ON detail.detail_id = detail_detail_type.detail_id) INNER JOIN valve_detail ON detail.detail_id = valve_detail.detail_id) ON list_of_operations.operation_id = operations_qa_dependency.operation_id) ON material_type_separate.material_type_separete_id = operations_qa_dependency.material_type_separete_id) ON material.material_id = detail_material.material_id) ON (meterial_type_general.material_type_general_id = material.material_type_general_id) AND (meterial_type_general.material_type_general_id = general_to_separate.material_type_general_id)) ON pressure.pressure_id = operations_qa_dependency.pressure_id) ON tempr_operation.tempr_operation_id = operations_qa_dependency.tempr_operation_id) ON tempr.tempr_id = operations_qa_dependency.tempr_id) ON valve_qa_type.valve_qa_type_id = operations_qa_dependency.valve_qa_type_id) ON valve_type.valve_type_by_socet = detail_detail_type.valve_type_by_socet) INNER JOIN valve_id_to_socet ON valve_type.valve_type_by_socet = valve_id_to_socet.valve_type_by_socet) ON (valve.valve_id = valve_id_to_socet.valve_id) AND (valve.valve_id = valve_detail.valve_id)
WHERE (((material.material_id)=",material_id,") AND ((valve_qa_type.valve_qa_type_id)=
", qa_type_id,") AND ((valve.valve_id)=",valve_id,") AND ((detail.detail_id)=",detail_id,
") AND ((tempr.tempr_id)=",tempr_id,") AND ((tempr_operation.tempr_operation_id)=",tempr_oper_id,
") AND ((pressure.pressure_id)=",pressure_id,"
) AND ((material_type_separate.material_type_separete_id)=", material_type_separete_id,"));
")
}else if(detail_id == 6 || detail_id == 32){
material_type_separete_id <- 7
select_operations <- paste0("SELECT  list_of_operations.operation_order, list_of_operations.operation_name_4table
FROM valve INNER JOIN ((valve_type INNER JOIN (valve_qa_type INNER JOIN (tempr INNER JOIN (tempr_operation INNER JOIN (pressure INNER JOIN (meterial_type_general INNER JOIN (material INNER JOIN ((material_type_separate INNER JOIN general_to_separate ON material_type_separate.material_type_separete_id = general_to_separate.material_type_separete_id) INNER JOIN (list_of_operations INNER JOIN (((detail INNER JOIN detail_material ON detail.detail_id = detail_material.detail_id) INNER JOIN ((detail_type INNER JOIN operations_qa_dependency ON detail_type.detail_type = operations_qa_dependency.detail_type) INNER JOIN detail_detail_type ON detail_type.detail_type = detail_detail_type.detail_type) ON detail.detail_id = detail_detail_type.detail_id) INNER JOIN valve_detail ON detail.detail_id = valve_detail.detail_id) ON list_of_operations.operation_id = operations_qa_dependency.operation_id) ON material_type_separate.material_type_separete_id = operations_qa_dependency.material_type_separete_id) ON material.material_id = detail_material.material_id) ON (meterial_type_general.material_type_general_id = material.material_type_general_id) AND (meterial_type_general.material_type_general_id = general_to_separate.material_type_general_id)) ON pressure.pressure_id = operations_qa_dependency.pressure_id) ON tempr_operation.tempr_operation_id = operations_qa_dependency.tempr_operation_id) ON tempr.tempr_id = operations_qa_dependency.tempr_id) ON valve_qa_type.valve_qa_type_id = operations_qa_dependency.valve_qa_type_id) ON valve_type.valve_type_by_socet = detail_detail_type.valve_type_by_socet) INNER JOIN valve_id_to_socet ON valve_type.valve_type_by_socet = valve_id_to_socet.valve_type_by_socet) ON (valve.valve_id = valve_id_to_socet.valve_id) AND (valve.valve_id = valve_detail.valve_id)
WHERE (((material.material_id)=",material_id,") AND ((valve_qa_type.valve_qa_type_id)=
", qa_type_id,") AND ((valve.valve_id)=",valve_id,") AND ((detail.detail_id)=",detail_id,
") AND ((tempr.tempr_id)=",tempr_id,") AND ((tempr_operation.tempr_operation_id)=",tempr_oper_id,
") AND ((pressure.pressure_id)=",pressure_id,"
) AND ((material_type_separate.material_type_separete_id)=", material_type_separete_id,"));
")
}else{
# select
select_operations <- paste0("SELECT  list_of_operations.operation_order, list_of_operations.operation_name_4table
FROM valve INNER JOIN ((valve_type INNER JOIN (valve_qa_type INNER JOIN (tempr INNER JOIN (tempr_operation INNER JOIN (pressure INNER JOIN (meterial_type_general INNER JOIN (material INNER JOIN ((material_type_separate INNER JOIN general_to_separate ON material_type_separate.material_type_separete_id = general_to_separate.material_type_separete_id) INNER JOIN (list_of_operations INNER JOIN (((detail INNER JOIN detail_material ON detail.detail_id = detail_material.detail_id) INNER JOIN ((detail_type INNER JOIN operations_qa_dependency ON detail_type.detail_type = operations_qa_dependency.detail_type) INNER JOIN detail_detail_type ON detail_type.detail_type = detail_detail_type.detail_type) ON detail.detail_id = detail_detail_type.detail_id) INNER JOIN valve_detail ON detail.detail_id = valve_detail.detail_id) ON list_of_operations.operation_id = operations_qa_dependency.operation_id) ON material_type_separate.material_type_separete_id = operations_qa_dependency.material_type_separete_id) ON material.material_id = detail_material.material_id) ON (meterial_type_general.material_type_general_id = material.material_type_general_id) AND (meterial_type_general.material_type_general_id = general_to_separate.material_type_general_id)) ON pressure.pressure_id = operations_qa_dependency.pressure_id) ON tempr_operation.tempr_operation_id = operations_qa_dependency.tempr_operation_id) ON tempr.tempr_id = operations_qa_dependency.tempr_id) ON valve_qa_type.valve_qa_type_id = operations_qa_dependency.valve_qa_type_id) ON valve_type.valve_type_by_socet = detail_detail_type.valve_type_by_socet) INNER JOIN valve_id_to_socet ON valve_type.valve_type_by_socet = valve_id_to_socet.valve_type_by_socet) ON (valve.valve_id = valve_id_to_socet.valve_id) AND (valve.valve_id = valve_detail.valve_id)
WHERE (((valve_qa_type.valve_qa_type_id)=", qa_type_id,") AND ((valve.valve_id)=",valve_id,") AND ((detail.detail_id)="
,detail_id,") AND ((tempr.tempr_id)=",tempr_id,") AND ((tempr_operation.tempr_operation_id)=",tempr_oper_id,
") AND ((pressure.pressure_id)=",pressure_id,") AND ((material.material_id)=",material_id,"));
")
}
x <- dbGetQuery(con, select_operations)
Encoding(x$operation_name_4table) <- "UTF-8"
# Encoding(x$operation_name_particular) <- "UTF-8"
x <- x[order(x$operation_order),]
x$join_key <- as.integer(seq(1, length(x$operation_order), by = 1))
x$operation_order <- NULL
return(x)
}
con <- okan_db_connect()
valve_list <- get_valve_list(con)
qa_type_list <- get_qa_type_list(con)
tempr_list <- get_tempr_list(con)
tempr_oper_list <- get_tempr_oper_list(con)
pressure_list <- get_pressure_list(con)
dn_value_list <- get_dn_list(con)
control_type_list <- get_control_type_list(con)
# ct_name <- control_type_list$control_type_def[1]
# #
# # # con, vavle_type,qa_type, tempr, tempr_oper, pressure, detail, material
# qa_type <- qa_type_list$valve_qa_type_name[1]
# tempr <- tempr_list$tempr_value_more_than_100[1]
# tempr_oper <- tempr_oper_list$tempr_oper_value_more_than_20[1]
# pressure <- pressure_list$pressure_type[1]
# #
# valve_name <- valve_list$valve_name[5]
# detail_list <- get_detial_list(con, valve_name)
# detail = detail_list$detail_name_rus[5]
# material_list <- get_material_list(con,detail,valve_name)
# material <- material_list$material_name[1]
# # # get_qa_operations_for_detail(con, vavle_type,qa_type, tempr, tempr_oper, pressure, detail, material)
# # qa_oper_list <- get_qa_operations_for_detail(con, valve_name, qa_type, tempr, tempr_oper, pressure, detail, material)
# #
okan_db_disconnect(con)
#_________________________________________________________________________________________________________________________________________________
### Shiny UI ####
#_________________________________________________________________________________________________________________________________________________
ui <- dashboardPage(
dashboardHeader(title = "OKANVAL web-UI demo"),
## Sidebar content
dashboardSidebar(
sidebarMenu(
menuItem("Initial Data", tabName = "init_data", icon = icon("home")),
menuItem("Details and Materials", tabName = "det_n_mat", icon = icon("list")),
menuItem("QA operations table", tabName = "qa_op_table", icon = icon("table"))
)
),
## Body content
dashboardBody(
tabItems(
# First tab content
tabItem(tabName = "init_data",
wellPanel(
fluidPage(
column(8,
fluidPage(
selectInput("select_valve", label = h3("Select valve"),
choices = valve_list$valve_name,
selected = 1,
width = "100%"),
hr()
)
),
column(4,
textInput("rv_drawing_number", "Input middle part of RV drawing number",
value = "RV-YYYYYY", width = "80%"),
# verbatimTextOutput("rv_draw_numb_disp")
h5("Drawing number for details:"),
verbatimTextOutput("rv_draw_numb_disp")
),
column(4,
selectInput("select_qa_type", label = h4("Select QA type of valve"),
choices = qa_type_list$valve_qa_type_name,
selected = 1,
width = "30%")
),
column(4,
selectInput("dn_value", label = h4("Select DN value of valve"),
choices = dn_value_list$dn_value,
selected = 1,
width = "30%")
),
column(4,
selectInput("control_type", label = h4("Select valve control type"),
choices = control_type_list$control_type_def,
selected = 1,
width = "60%")
)
),
fluidPage(
column(4,fluidPage(
selectInput("select_tempr", label = h4("Is operational temperature above 100?"),
choices = tempr_list$tempr_value_more_than_100,
selected = 1,
width = "20%")
)
),
column(4,fluidPage(
selectInput("select_tempr_oper", label = h4("Is ambient temperature above 20?"),
choices = tempr_oper_list$tempr_oper_value_more_than_20,
selected = 1,
width = "20%")
)
),
column(4,fluidPage(
selectInput("select_pressure", label = h4("Select pressure type"),
choices = pressure_list$pressure_type,
selected = 1,
width = "20%")
)
)
)
)
),
# Second tab content
tabItem(tabName = "det_n_mat",
wellPanel(
fluidPage(
h2("Detail list"),
h3("Select the materials"),
htmlOutput("details_and_materials")
)
)
),
# Third tab content
tabItem(tabName = "qa_op_table",
wellPanel(
fluidPage(
h2("Table of QA operations for all details"),
# verbatimTextOutput("info_text"),
verbatimTextOutput("valve_code")
,
htmlOutput("qa_table"),
htmlOutput("text"),
downloadButton('downloadData', 'Download')
)
)
)
)
)
)
#_________________________________________________________________________________________________________________________________________________
### Shiny Server ####
#_________________________________________________________________________________________________________________________________________________
server <- function(input, output, session) {
con <- okan_db_connect()
reactive_get_oper_table <- reactive({
frame_with_names_of_operations <- get_distinct_names_of_qa_operations(con)
dataframe_to_be_retuned <- frame_with_names_of_operations
qa_type <- input$select_qa_type
tempr <- input$select_tempr
tempr_oper <- input$select_tempr_oper
pressure <- input$select_pressure
valve_name <- input$select_valve
detail_list <- get_detial_list(con, input$select_valve)
# drawing_number_of_detail <- data.frame(names = 0)
drawing_number_of_detail <- data.frame(names=as.character(seq(length(detail_list$detail_name_rus))),
stringsAsFactors=FALSE)
# drawing_number_of_detail$name <- x$valve_id
for(i in 1 : length(detail_list$detail_name_rus)) {
name <- paste0("material_", i)
material <- input[[name]]
detail = detail_list$detail_name_rus[i]
x<-get_detail_input_info(con, detail, type = "drawing name")
drawing_number_of_detail$names[i] <-
paste0(reactive_get_rv_drawing_number(), "-",get_detail_input_info(con, detail, type = "drawing name"))
x <- get_qa_operations_for_detail(con, valve_name, qa_type, tempr, tempr_oper, pressure, detail, material)
names(x)[names(x) == 'operation_name_4table'] <- paste0(detail, "/", material)
dataframe_to_be_retuned <- inner_join(dataframe_to_be_retuned, x, by = "join_key")
rm(x, material, name, detail)
}
dataframe_to_be_retuned$join_key <- NULL
# transponse output data
dataframe_to_be_retuned.t <- t(dataframe_to_be_retuned)
dataframe_to_be_retuned.t <- as.data.frame(dataframe_to_be_retuned.t )
colnames(dataframe_to_be_retuned.t) <- as.character(unlist(dataframe_to_be_retuned.t["operation_name_particular", ]))
dataframe_to_be_retuned.t <- dataframe_to_be_retuned.t[- c(1, 2), ]
dataframe_to_be_retuned.t <- add_rownames(dataframe_to_be_retuned.t, "Detail/Material")
# split detail and material to seperate columns
x<-strsplit(dataframe_to_be_retuned.t$`Detail/Material`,"/")
x<- as.data.frame(x)
x.t <- t(x)
x <- as.data.frame(x.t)
dataframe_to_be_retuned.t$Detail <- x$V1
dataframe_to_be_retuned.t$Material <- x$V2
dataframe_to_be_retuned.t$`Detail/Material` <- NULL
dataframe_to_be_retuned.t$`Обозначение чертежа детали` <- drawing_number_of_detail$names
# re-ordering indexes
dataframe_to_be_retuned.t <- dataframe_to_be_retuned.t[, c(25,26,27,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24)]
# return(dataframe_to_be_retuned)
return(dataframe_to_be_retuned.t)
})
reactive_get_definition_of_designations <- reactive({
y <- reactive_get_oper_table()
z <- which(y$`Радиографический контроль отливок` == '100*100 %')
if(length(z) == 0){
z <- which(y$`Радиографический контроль отливок` == '100% K3')
if(length(z) == 0){
z <- which(y$`Радиографический контроль отливок` == '20% K3')
if(length(z) == 0){
select = NaN
}else{
select = '20% K3'
}
}else{
select = '100% K3'
}
}else{
select = '100*100 %'
}
if(!is.nan(select)){
con <- okan_db_connect()
select_full <- paste0("SELECT list_of_operations.operation_name_4table_definition
FROM list_of_operations
WHERE list_of_operations.operation_name_4table='", select, "'")
get_def_of_select <- dbGetQuery(con, select_full)
Encoding(get_def_of_select$operation_name_4table_definition) <- "UTF-8"
to_return <- get_def_of_select$operation_name_4table_definition[1]
rreturn <- paste0(select,"  -", to_return)
return(rreturn)
}else{
return(' ')
}
})
reactive_get_valve_code <- reactive({
qa_type <- input$select_qa_type
dn <- input$dn_value
valve_type <- get_valve_input_info(con, input$select_valve, type = "type")
material <- input$material_1
material_type <- get_material_input_info(con, input$material_1, type = "body material type")
qa_type <- get_qa_input_info(con, input$select_qa_type, type = "qa type name")
control_type <- get_valve_input_info(con, input$select_valve, type = "control_type")
control_valve_type <- get_control_type_info(con, input$control_type, type = "4table")
x <- paste0("OK.", dn, ".A",  valve_type, ".", material_type, qa_type, control_type, control_valve_type)
return(x)
})
reactive_get_header_of_qa_table <- reactive({
code <- reactive_get_valve_code()
x <- paste0("Таблица контроля качества основных материалов изделия ", input$select_valve, ", номер чертежа ",
code, " СБ, классификационное обозначение ", input$select_qa_type, " по НП-068-05")
return(x)
})
reactive_get_rv_drawing_number <- reactive({
dynamic_part <- input$rv_drawing_number
x <- paste0("RV-", dynamic_part)
return(x)
})
output$valve_code <- renderText({
reactive_get_header_of_qa_table()
# str(reactive_get_header_of_qa_table())
},quoted = FALSE)
output$details_and_materials <-
renderUI({
detail_list <- get_detial_list(con, input$select_valve)
lapply(1:length(detail_list$detail_name_rus), function(i) {
detail_current = detail_list$detail_name_rus[i]
Encoding(detail_current) <- "UTF-8"
material_4_detail <- get_material_list(con, detail_current, input$select_valve)
column(6,
selectInput(paste0("material_",i), label = paste0(detail_current," ,material"),
# selectInput(paste0("material_",i), label = paste0("material_",i),
choices = material_4_detail$material_name,
selected = 1)
)
})
})
output$rv_draw_numb_disp <-
renderText({paste0(input$rv_drawing_number,"-XX")})
output$qa_table <-
# renderTable({reactive_get_oper_table()}, spacing = 'xs')
renderGvis({
gvisTable(reactive_get_oper_table(), options=list(frozenColumns = 3, page = 'enable', headerRow =
"tr.rotate {
white-space: nowrap;
-webkit-transform-origin: 65px 60px;
-moz-transform-origin: 65px 60px;
-o-transform-origin: 65px 60px;
-ms-transform-origin: 65px 60px;
transform-origin: 65px 60px;
}
tr.rights {
text-align: center;
}" ))
})
output$text <-
renderText({
HTML(paste0(
"<p><b>Обозначения:</b></p>
<p>+   - контроль производится;</p>
<p>-   - контроль не производится;</p>
<p>+c  - результаты испытаний подтверждаются сертификатом.</p>",
reactive_get_definition_of_designations()),
"<p> </p>"
)
})
output$downloadData <- downloadHandler(
filename = function() {
paste0('QA_table_', Sys.Date(), '.csv')
},
content = function(file) {
data <- reactive_get_oper_table()
header <- paste0(reactive_get_header_of_qa_table(),"\n")
bottom <- paste0(
"Обозначения:
+   - контроль производится;
-   - контроль не производится;
+c  - результаты испытаний подтверждаются сертификатом.",
"\n",
reactive_get_definition_of_designations())
cat(header, file=file, append = TRUE, sep =";" )
write.table(data, file=file, append=TRUE, sep=';')
cat(bottom, file=file, append = TRUE, sep =";" )
}
)
}
#_________________________________________________________________________________________________________________________________________________
### Shiny App ####
#_________________________________________________________________________________________________________________________________________________
shinyApp(ui, server)
library(shiny); runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
View(data)
View(data)
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
library(shiny); runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
library(shiny); runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/Backup_shiny/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/Backup_shiny/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
library(shiny); runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
library(shiny); runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
View(defenition_df)
runApp('Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
View(data)
View(data)
View(data)
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
y <- reactive_get_oper_table()
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
y <- reactive_get_oper_table()
qa2_frame <- reactiive_get_welding_and_overaly_table()
View(y)
View(qa2_frame)
View(y)
qa_frame <- qa_frame[-c(1,2,3)]
qa_frame <- reactive_get_oper_table()
qa_frame <- qa_frame[-c(1,2,3)]
View(qa_frame)
View(qa2_frame)
operation_name_4table <- unlist(qa_frame)
qa_frame <- as.data.frame(operation_name_4table)
qa_frame$operation_name_4table <- as.character(qa_frame$operation_name_4table)
operation_name_4table <- unique(qa_frame$operation_name_4table)
qa_frame <- as.data.frame(operation_name_4table)
qa_frame$operation_name_4table <- as.character(qa_frame$operation_name_4table)
View(qa_frame)
op_names <- dbGetQuery(con, "SELECT DISTINCT list_of_operations.operation_name_4table_definition,
list_of_operations.operation_name_4table,
list_of_operations.operation_name_4definition
FROM	list_of_operations
WHERE 	list_of_operations.operation_id < 50 AND
list_of_operations.operation_name_4table != '+' AND
list_of_operations.operation_name_4table != '-' AND
list_of_operations.operation_name_4table != '+c' AND
list_of_operations.operation_name_4table !=  'NULL';")
Encoding(op_names$operation_name_4table_definition) <- "UTF-8"
defenition_df <- inner_join(op_names, qa2_frame, by = "operation_name_4table" )
View(op_names)
View(qa_frame)
View(op_names)
defenition_df <- inner_join(op_names, qa_frame, by = "operation_name_4table" )
View(defenition_df)
print_string <- ""
for( i in 1:length(defenition_df$operation_name_4table)) {
print_string <- paste0(print_string, "<p>", defenition_df$operation_name_4definition[i], " - ", defenition_df$operation_name_4table_definition[i], "; </p>")
}
View(defenition_df)
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')

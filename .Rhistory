
dn_4_code,
public.valve_type,
public.detail,
public.hydro,
public.ferrite_phase,
public.radiography,
public.detail_to_hydro,
public.detail_to_radiography,
public.ferrite_phase_to_detail
WHERE
operations_qa_dependency.operation_id = list_of_operations.operation_id AND
tempr.tempr_id = operations_qa_dependency.tempr_id AND
tempr_operation.tempr_operation_id = operations_qa_dependency.tempr_operation_id AND
pressure.pressure_id = operations_qa_dependency.pressure_id AND
material_type_separate.material_type_separete_id = operations_qa_dependency.material_type_separete_id AND
valve_qa_type.valve_qa_type_id = operations_qa_dependency.valve_qa_type_id AND
valve.valve_id = valve_id_to_socet.valve_id AND
valve_id_to_socet.valve_type_by_socet = valve_type.valve_type_by_socet AND
valve_type.valve_type_by_socet = operations_qa_dependency.valve_type_by_socet AND
hydro.hydro_id = operations_qa_dependency.hydro_id AND
ferrite_phase.fp_id = operations_qa_dependency.fp_id AND
ferrite_phase.fp_id = ferrite_phase_to_detail.fp_id AND
radiography.rad_id = operations_qa_dependency.rad_id AND
radiography.rad_id = detail_to_radiography.rad_id AND
detail_to_hydro.hydro_id = hydro.hydro_id AND
detail_to_hydro.detail_id = detail.detail_id AND
detail_to_radiography.detail_id = detail.detail_id AND
ferrite_phase_to_detail.detail_id = detail.detail_id AND
valve.valve_id = ",valve_id," AND
valve_qa_type.valve_qa_type_id = ",qa_type_id ,"AND
detail.detail_id = ",detail_id ,"AND
material_type_separate.material_type_separete_id =  ",material_sep_id ,"AND
tempr.tempr_id = ",tempr_id ,"AND
tempr_operation.tempr_operation_id = ",tempr_oper_id," AND
list_of_operations.operation_id < 50 AND
pressure.pressure_id =", pressure_id,";")
x <- dbGetQuery(con, select_operations)
View(x)
View(dataframe_to_be_retuned)
frame_with_names_of_operations <- get_distinct_names_of_qa_operations(con,type = "QA 1")
View(frame_with_names_of_operations)
x<- dbGetQuery(con, "SELECT DISTINCT operation_order , operation_name_particular
FROM list_of_operations
WHERE list_of_operations.operation_id < 50")
Encoding(x$operation_name_particular) <- "UTF-8"
x <- x[order(x$operation_order),]
View(x)
x<- dbGetQuery(con, "SELECT DISTINCT operation_order , operation_name_particular
FROM list_of_operations
WHERE list_of_operations.operation_id < 46")
Encoding(x$operation_name_particular) <- "UTF-8"
View(x)
x <- x[order(x$operation_order),]
runApp('Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/QA_table_4_details/pg_shiny_dash/Valve_QA_table_viewer.R')
View(x)
valve_id <- get_valve_input_info(con, valve_name, type = "id")
# get qa_type id
qa_type_id <- get_qa_input_info(con, qa_type, type = "id")
# get tempr_id
tempr_id <- get_tempr_input_info(con, tempr, type = "id")
# get tempr_oper_id
tempr_oper_id <- get_tempr_oper_input_info(con, tempr_oper, type = "id")
# get pressure_id
pressure_id <- get_pressure_input_info(con, pressure, type = "id")
# get detail id
detail_id <- get_detail_input_info(con, detail, type = "id")
# get material_id
material_sep_id <- get_material_input_info(con, material, type = "material type separate")
# шпильки
if(detail_id == 5 || detail_id == 31){
material_sep_id <- 6
}else if(detail_id == 6 || detail_id == 32){
material_sep_id <- 7
}else{
material_sep_id <- material_sep_id
}
select_operations <- paste0("SELECT
list_of_operations.operation_order,
list_of_operations.operation_name_4table
FROM
public.dn
WHERE
dn.dn_value = '", input$dn_value,"';
")
dn <- dbGetQuery(con,select)
dn<- dn$dn_4_code[1]
valve_type <- get_valve_input_info(con, input$select_valve, type = "type")
material <- input$material_1
material_type <- get_material_input_info(con, input$material_1, type = "body material type")
qa_type <- get_qa_input_info(con, input$select_qa_type, type = "qa type name")
control_type <- get_valve_input_info(con, input$select_valve, type = "control_type")
control_valve_type <- get_control_type_info(con, input$control_type, type = "4table")
x <- paste0("OK.", dn, ".A",  valve_type, ".", material_type, qa_type, control_type, control_valve_type)
return(x)
})
reactive_get_header_of_qa_table <- reactive({
code <- reactive_get_valve_code()
x <- paste0("Таблица контроля качества основных материалов изделия ", get_valve_input_info(con, input$select_valve, type = "type_def")
, ", номер чертежа ", code, " СБ, классификационное обозначение ", input$select_qa_type, " по НП-068-05")
return(x)
})
reactive_get_header_of_qa2_table <- reactive({
code <- reactive_get_valve_code()
x <- paste0("Таблица контроля качества сварных швов изделия ", get_valve_input_info(con, input$select_valve, type = "type_def")
, ", номер чертежа ", code, " СБ, классификационное обозначение ", input$select_qa_type, " по НП-068-05")
return(x)
})
reactive_get_rv_drawing_number <- reactive({
dynamic_part <- input$rv_drawing_number
x <- dynamic_part
return(x)
})
reactiive_get_welding_and_overaly_table <- reactive({
qa_type_name <- input$select_qa_type
qa_type_welding <- get_qa_input_info(con, qa_type_name, type = "qa welding")
tempr_name <- input$select_tempr
valve_name <- input$select_valve
dataframe_to_be_retuned <- get_distinct_names_of_qa_operations(con,type = "QA 2")
materials <- reactive_get_oper_table()
materials <- materials[c(1,2,3)]
materials$Деталь <- as.character(materials$Деталь)
materials$Материал <- as.character(materials$Материал)
details_for_welding_list <- get_welding_and_overlay_detail_list(con, valve_name)
if("Корпус + патрубок" %in% details_for_welding_list$detail_4con_name){
row_to_keep = which(details_for_welding_list$detail_4con_name != "Перех.патрубок")
details_for_welding_list <- details_for_welding_list[row_to_keep,]
}
if(is.data.frame(details_for_welding_list)){
details_for_welding_list$`Кат.сварных соединений` <- details_for_welding_list$detail_name_rus_welding
yy <- which(!is.na(details_for_welding_list$`Кат.сварных соединений`))
yyy <- which(is.na(details_for_welding_list$`Кат.сварных соединений`))
details_for_welding_list$`Кат.сварных соединений`[yy] <- qa_type_welding
details_for_welding_list$`Кат.сварных соединений`[yyy] <- "-"
detail_list2 <- get_overlay_detail_list(con, input$select_valve)
if(is.data.frame(detail_list2)){
overlay_detail_list <- get_overlay_detail_list(con, valve_name)
overlay_detail_list <- overlay_detail_list[(-c(2))]
overlay_detail_list$input_overlay_type <- "0"
for(i in 1 : length(overlay_detail_list$detail_4con_name)){
detail_name <- overlay_detail_list$detail_4con_name[i]
name <- paste0("overlay_", i)
input_overlay_type <- input[[name]]
overlay_detail_list$input_overlay_type[i] <- input_overlay_type
}
details_for_welding_list <- left_join(details_for_welding_list, overlay_detail_list,
by = "detail_4con_name")
}
x <- which(details_for_welding_list$input_overlay_type == "Отсутствует")
x <- details_for_welding_list[x,]
details_for_welding_list <- anti_join(details_for_welding_list,x, by = "input_overlay_type")
details_for_welding_list$`Материал` <- "0"
details_for_welding_list$`Обозначение чертежа деталей` <- "0"
for(i in 1 : length(details_for_welding_list$detail_name_rus)) {
if(!is.na(details_for_welding_list$detail_name_rus_welding[i])){
x1 <- which(details_for_welding_list$detail_name_rus_welding[i] == materials$Деталь)
xx1 <- materials[x1,]
x2 <- which(details_for_welding_list$detail_name_rus[i] == materials$Деталь)
xx2 <- materials[x2,]
det_materilal <- paste0(xx1$Материал[1], " + ", xx2$Материал[1])
det_designation <- paste0(xx1$`Обозначение чертежа детали`[1], " & ", xx2$`Обозначение чертежа детали`[1])
material_of_current_detail <- xx2$Материал[1]
}else{
x2 <- which(details_for_welding_list$detail_name_rus[i] == materials$Деталь)
xx2 <- materials[x2,]
det_materilal <- paste0(xx2$Материал[1], " + ", details_for_welding_list$input_overlay_type[i])
det_designation <- paste0(xx2$`Обозначение чертежа детали`[1])
material_of_current_detail <- xx2$Материал[1]
}
details_for_welding_list$Материал[i] <- det_materilal
details_for_welding_list$`Обозначение чертежа деталей`[i] <- det_designation
material_type_separate_id <- get_material_input_info(con,material_of_current_detail,
type = "material type separate")
connection_type_id <- get_conncetion_type_info(con, details_for_welding_list$detail_4con_name[i],
type = "id")
detail_4con_name_current <- details_for_welding_list$detail_4con_name[i]
x <- get_qa2_operations_for_detail(con, qa_type_name, tempr_name, connection_type_id, material_type_separate_id, detail_4con_name_current)
colnames(x)[colnames(x) == "operation_name_4table"] <- detail_4con_name_current
dataframe_to_be_retuned <- inner_join(dataframe_to_be_retuned, x, by = "operation_order")
}
dataframe_to_be_retuned.t <- t(dataframe_to_be_retuned) %>% as.data.frame()
colnames(dataframe_to_be_retuned.t) <- as.character(unlist(dataframe_to_be_retuned.t["operation_name_particular", ]))
dataframe_to_be_retuned.t <- dataframe_to_be_retuned.t[- c( 2), ]
dataframe_to_be_retuned.t <- add_rownames(dataframe_to_be_retuned.t, "Деталь")
dataframe_to_be_retuned.t$Деталь[c(1)] <- "1"
dataframe_to_be_retuned.t$Деталь[c(2)] <- "2"
names(details_for_welding_list)[names(details_for_welding_list)=="detail_4con_name"] <- "Деталь"
names(details_for_welding_list)[names(details_for_welding_list)=="number_of_welds"] <- "Кол-во сварных швов"
names(details_for_welding_list)[names(details_for_welding_list)=="welding_type"] <- "Способ сварки/наплавки"
details_for_welding_list <- details_for_welding_list[-c(2,3,4,8)]
y <- data.frame("2", " "," "," "," "," ")
colnames(y) <- colnames(details_for_welding_list)
details_for_welding_list <- rbind(y,details_for_welding_list)
y <- data.frame("1", " "," "," "," "," ")
colnames(y) <- colnames(details_for_welding_list)
details_for_welding_list <- rbind(y,details_for_welding_list)
details_for_welding_list[] <- lapply(details_for_welding_list, as.character)
dataframe_to_be_retuned.t <- inner_join(dataframe_to_be_retuned.t, details_for_welding_list,
by = "Деталь")
dataframe_to_be_retuned.t <- dataframe_to_be_retuned.t[, c(1,24,25,22,23,21,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20)]
dataframe_to_be_retuned.t$Деталь[c(1,2)] <- " "
dataframe_to_be_retuned.t[] <- lapply(dataframe_to_be_retuned.t, as.character)
dataframe_to_be_retuned.t[1,] <- c(1:ncol(dataframe_to_be_retuned.t))
return(dataframe_to_be_retuned.t)
}
})
output$qa1_header <- renderUI({
str <- reactive_get_header_of_qa_table()
print(str)
Encoding(str) <- "UTF-8"
headerPanel(tags$div(
HTML(paste0("<strong>",'<font face="Bedrock" size="4">',str,"</font>","</strong>"))
))
})
output$qa2_header <- renderUI({
if ( input$select_valve != "Кран шаровый" ) {
str <- reactive_get_header_of_qa2_table()
headerPanel(tags$div(
HTML(paste0("<strong>",'<font face="Bedrock" size="4">',str,"</font>","</strong>"))
))
}else{
headerPanel(h4("ТБ2 не требуется"))
}
})
output$dynamic_select_pressure <-
renderUI({
current_qa_type <- input$select_qa_type
if(current_qa_type == "2ВIIIс" || current_qa_type == "3СIIIс"){
selectInput("select_pressure", label = h5("Класс давления по ANSI"),
choices = pressure_list$pressure_type[2],
selected = 1,
width = "80%")
}else {
selectInput("select_pressure", label = h5("Класс давления по ANSI"),
choices = pressure_list$pressure_type,
selected = 1,
width = "80%")
}
})
output$details_and_materials <-
renderUI({
detail_list <- get_detial_list(con, input$select_valve)
lapply(1:length(detail_list$detail_name_rus), function(i) {
detail_current = detail_list$detail_name_rus[i]
Encoding(detail_current) <- "UTF-8"
material_4_detail <- get_material_list(con, detail_current, input$select_valve)
column(6,
selectInput(paste0("material_",i), label = paste0(detail_current," ,материал:"),
# selectInput(paste0("material_",i), label = paste0("material_",i),
choices = material_4_detail$material_name,
selected = 1)
)
})
})
output$details_and_overlays <-
renderUI({
detail_list2 <- get_overlay_detail_list(con, input$select_valve)
if(is.data.frame(detail_list2)){
lapply(1:length(detail_list2$detail_4con_name), function(i) {
detail_current = detail_list2$detail_name_rus[i]
Encoding(detail_current) <- "UTF-8"
material_4_detail <- get_overlay_list(con)
print((paste0("overlay_",i)))
column(6,
selectInput(paste0("overlay_",i), label = paste0(detail_current," ,наплавка:"),
# selectInput(paste0("material_",i), label = paste0("material_",i),
choices = material_4_detail$overlay_type_name,
selected = 1)
)
})
}
})
observe({if(input$select_valve != "Кран шаровый") {
shinyjs::enable( "downloadDataDocx_qa2")
shinyjs::enable( "download_qa2")
} else{
shinyjs::disable( "downloadDataDocx_qa2")
shinyjs::disable( "download_qa2")
}
})
output$rv_draw_numb_disp <-
renderText({paste0(input$rv_drawing_number,"-XX")})
output$qa_table <-
renderGvis({
# TODO add normal progressbar
# Create a Progress object
progress <- shiny::Progress$new()
# Make sure it closes when we exit this reactive, even if there's an error
on.exit(progress$close())
progress$set(message = "Создание новой таблицы ТБ", value = 0.1)
Sys.sleep(0.8)
progress$set(message = "Создание новой таблицы ТБ", value = 0.4)
x <- reactive_get_oper_table()
# renderTable(reactive_get_oper_table())
gvisTable(reactive_get_oper_table(), options=list(frozenColumns = 2, page = 'enable'))
# progress$inc(1)
})
output$qa_table2 <-
renderGvis({
# TODO add normal progressbar
# Create a Progress object
progress <- shiny::Progress$new()
# Make sure it closes when we exit this reactive, even if there's an error
on.exit(progress$close())
progress$set(message = "Создание новой таблицы ТБ2", value = 0.3)
Sys.sleep(0.8)
progress$set(message = "Создание новой таблицы ТБ2", value = 0.5)
if(input$select_valve != "Кран шаровый"){
gvisTable(reactiive_get_welding_and_overaly_table(), options=list(frozenColumns = 2, allowHtml = TRUE, showRowNumber = FALSE
# cssClassNames = "{headerRow: 'myTableHeadrow'}", alternatingRowStyle = FALSE
))
}
# progress$inc(1)
})
output$text <-
renderText({
HTML(paste0(
"<p><b>Обозначения:</b></p>
<p>РГК  - радиографический контроль;</p>
<p>УЗК  - ультразвуковой контроль;</p>
<p>МПД  - магнитопорошковый контроль;</p>
<p>+   - контроль производится;</p>
<p>-   - контроль не производится;</p>
<p>+c  - результаты испытаний подтверждаются сертификатом.</p>",
reactive_get_definition_of_designations()),
"<p> </p>"
)
})
output$text_qa2 <-
renderText({
if (input$select_valve != "Кран шаровый") {
HTML(paste0(
"<p><b>Обозначения:</b></p>
<p>ВК   - входной контроль;</p>
<p>ВиК  - визуальный и измерительный контроль;</p>
<p>РГК  - радиографический контроль;</p>
<p>УЗК  - ультразвуковой контроль;</p>
<p>МПД  - магнитопорошковый контроль;</p>
<p>+   - контроль производится;</p>
<p>-   - контроль не производится;</p>
<p>+c  - результаты испытаний подтверждаются сертификатом;</p>",
reactive_get_definition_of_designations_for_qa2()),
"<p> </p>"
)
}
})
output$download_qa2 <- downloadHandler(
filename = function() {
paste0('QA2_table_', Sys.Date(), '.csv')
},
content = function(file) {
data <- reactiive_get_welding_and_overaly_table()
header <- paste0(reactive_get_header_of_qa2_table(),"\n")
bottom <- paste0(
"Обозначения:
ВК   - входной контроль;
ВиК  - визуальный и измерительный контроль;
РГК  - радиографический контроль;
УЗК  - ультразвуковой контроль;
МПД  - магнитопорошковый контроль;
+   - контроль производится;
+c  - результаты испытаний подтверждаются сертификатом;",
"\n",
reactive_get_definition_of_designations_for_qa2_file())
cat(header, file=file, append = TRUE, sep =";" )
write.table(data, file=file, append=TRUE, sep=';', row.names = FALSE, quote = TRUE)
cat(bottom, file=file, append = TRUE, sep =";" )
}
)
output$downloadData <- downloadHandler(
filename = function() {
paste0('QA_table_', Sys.Date(), '.csv')
},
content = function(file) {
data <- reactive_get_oper_table()
header <- paste0(reactive_get_header_of_qa_table(),"\n")
bottom <- paste0(
"Обозначения:
РГК  - радиографический контроль;
УЗК  - ультразвуковой контроль;
МПД  - магнитопорошковый контроль;
+   - контроль производится;
-   - контроль не производится;
+c  - результаты испытаний подтверждаются сертификатом;",
"\n",
reactive_get_definition_of_designations_for_file())
cat(header, file=file, append = TRUE, sep =";" )
write.table(data, file=file, append=TRUE, sep=';', row.names = FALSE)
cat(bottom, file=file, append = TRUE, sep =";" )
}
)
output$downloadDataDocx <- downloadHandler(
filename = function() {
paste0('QA_table_', Sys.Date(), '.docx')
},
content = function(file) {
data <- reactive_get_oper_table()
parprop <- parProperties(padding = 2)
cellprop <- cellProperties( text.direction = "btlr" )
data_header <- colnames(data)
datadata <- FlexTable(data, header.columns = FALSE) %>%
addHeaderRow( value = c("", "","","Наименование операции"), colspan = c( 1,1,1, 24),
par.properties = parprop, text.properties = textNormal() ) %>%
addHeaderRow( value=data_header, cell.properties = cellprop, text.properties = textNormal() )
header <- paste0(reactive_get_header_of_qa_table(),"\n")
bottom <- paste0(
"Обозначения:
РГК  - радиографический контроль;
УЗК  - ультразвуковой контроль;
МПД  - магнитопорошковый контроль;
+   - контроль производится;
-   - контроль не производится;
+c  - результаты испытаний подтверждаются сертификатом;",
"\n",
reactive_get_definition_of_designations_for_file(),
"
Настоящую таблицу рассматривать совместно с ОСТ 108.004.10 и комплектом конструкторской документации."
)
doc <- docx(  ) %>% addParagraph(header) %>% addFlexTable( datadata ) %>% addParagraph(bottom)
writeDoc(doc, file=file )
}
)
output$downloadDataDocx_qa2 <- downloadHandler(
filename = function() {
paste0('QA2_table_', Sys.Date(), '.docx')
},
content = function(file) {
data <- reactiive_get_welding_and_overaly_table()
header <- paste0(reactive_get_header_of_qa2_table(),"\n")
bottom <- paste0(
"Обозначения:
ВК   - входной контроль;
ВиК  - визуальный и измерительный контроль;
РГК  - радиографический контроль;
УЗК  - ультразвуковой контроль;
МПД  - магнитопорошковый контроль;
+   - контроль производится;
+c  - результаты испытаний подтверждаются сертификатом;",
"\n",
reactive_get_definition_of_designations_for_qa2_file(),
"
Настоящую таблицу рассматривать совместно с ОСТ 108.004.10 и комплектом конструкторской документации."
)
cellprop <- cellProperties( text.direction = "btlr" )
parprop <- parProperties(padding = 2)
data_header <- colnames(data)
datadata <- FlexTable(data, header.columns = FALSE) %>%
addHeaderRow( value = c("", "","","","","","Наименование операции"), colspan = c( 1,1,1,1,1,1, 19),
par.properties = parprop, text.properties = textNormal() ) %>%
addHeaderRow( value=data_header, cell.properties = cellprop, text.properties = textNormal() )
doc <- docx(  ) %>% addParagraph(header) %>% addFlexTable( datadata ) %>% addParagraph(bottom)
writeDoc(doc, file=file )
}
)
# observe({
#   toggleState("main", condition = input$select_valve)
#
#   # hide("main")
# })
}
#_________________________________________________________________________________________________________________________________________________
### Shiny App ####
#_________________________________________________________________________________________________________________________________________________
shinyApp(ui, server)
rm(list = ls())
library(googleAuthR)
options("googleAuthR.scopes.selected" =
c("https://www.googleapis.com/auth/urlshortener"))
#' Shortens a url using goo.gl
#'
#' @param url URl to shorten with goo.gl
#'
#' @return a string of the short URL
shorten_url <- function(url){
body = list(
longUrl = url
)
f <- gar_api_generator("https://www.googleapis.com/urlshortener/v1/url",
"POST",
data_parse_function = function(x) x$id)
f(the_body = body)
}
#' Expands a url that has used goo.gl
View(shorten_url)
#'
#' @param shortUrl Url that was shortened with goo.gl
#'
#' @return a string of the expanded URL
expand_url <- function(shortUrl){
f <- gar_api_generator("https://www.googleapis.com/urlshortener/v1/url",
"GET",
pars_args = list(shortUrl = "shortUrl"),
data_parse_function = function(x) x)
f(pars_arguments = list(shortUrl = shortUrl))
}
#' Get analyitcs of a url that has used goo.gl
#'
#' @param shortUrl Url that was shortened with goo.gl
#' @param timespan The time period for the analytics data
#'
#' @return a dataframe of the goo.gl Url analytics
analytics_url <- function(shortUrl,
timespan = c("allTime", "month", "week","day","twoHours")){
timespan <- match.arg(timespan)
f <- gar_api_generator("https://www.googleapis.com/urlshortener/v1/url",
"GET",
pars_args = list(shortUrl = "shortUrl",
projection = "FULL"),
data_parse_function = function(x) {
a <- x$analytics
return(a[timespan][[1]])
})
f(pars_arguments = list(shortUrl = shortUrl))
}
#' Get the history of the authenticated user
#'
#' @return a dataframe of the goo.gl user's history
user_history <- function(){
f <- gar_api_generator("https://www.googleapis.com/urlshortener/v1/url/history",
"GET",
data_parse_function = function(x) x$items)
f()
}
library(googleAuthR)
gar_auth()
s <- shorten_url("http://markedmondson.me")
s
expand_url(s)
analytics_url(s, timespan = "month")
user_history()
view rawurl_short.R hosted with ❤ by GitHub
If you then want to make this multi-user in Shiny, then you just need to use the helper functions provided:
## in global.R
library(googleAuthR)
options("googleAuthR.scopes.selected" = c("https://www.googleapis.com/auth/urlshortener"))
shorten_url <- function(url){
body = list(
longUrl = url
)
f <- gar_api_generator("https://www.googleapis.com/urlshortener/v1/url",
"POST",
data_parse_function = function(x) x$id)
f(the_body = body)
}
library(shiny)
library(googleAuthR)
source('global.R')
shinyServer(function(input, output, session){
## Get auth code from return URL
access_token  <- reactiveAccessToken(session)
## Make a loginButton to display using loginOutput
output$loginButton <- renderLogin(session, access_token())
short_url_output <- eventReactive(input$submit, {
## wrap existing function with_shiny
## pass the reactive token in shiny_access_token
## pass other named arguments
short_url <- with_shiny(f = shorten_url,
shiny_access_token = access_token(),
url=input$url)
})
output$short_url <- renderText({
short_url_output()
})
})
library(shiny)
library(googleAuthR)
shinyUI(
fluidPage(
loginOutput("loginButton"),
textInput("url", "Enter URL"),
actionButton("submit", "Shorten URL"),
textOutput("short_url")
))
shinyUI(
fluidPage(
loginOutput("loginButton"),
textInput("url", "Enter URL"),
actionButton("submit", "Shorten URL"),
textOutput("short_url")
))
library(shiny); runApp('C:/_IR_F/okanval/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/okanval/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/okanval/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/okanval/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/okanval/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/okanval/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/okanval/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/okanval/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/okanval/Valve_QA_table_viewer.R')
library(shiny); runApp('C:/_IR_F/okanval/Valve_QA_table_viewer.R')
runApp('C:/_IR_F/okanval/Valve_QA_table_viewer.R')
library(shiny); runApp('Valve_QA_table_viewer.R')
runApp('Valve_QA_table_viewer.R')
runApp('Valve_QA_table_viewer.R')
runApp('Valve_QA_table_viewer.R')
runApp('Valve_QA_table_viewer.R')
